import torch
from torchvision import transforms, datasets
import torch.nn as nn
import numpy as np
import cv2
import torch.nn.functional as F

train = datasets.MNIST('', train=True, download=True,
                       transform=transforms.Compose([
                           transforms.ToTensor()
                       ]))

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)
train.train_data.to(device)  #train_dataset.train_data is a Tensor(input data)
train.train_labels.to(device)

trainset = torch.utils.data.DataLoader(train, batch_size=10, shuffle=True)

class Net(nn.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = nn.Linear(28*28, 64)
        self.fc2 = nn.Linear(64, 64)
        self.fc3 = nn.Linear(64, 64)
        self.fc4 = nn.Linear(64, 10)

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = F.relu(self.fc3(x))
        x = self.fc4(x)
        return F.log_softmax(x, dim=1)

net = Net()
net.to(device)
print(net)
import torch.optim as optim

loss_function = nn.CrossEntropyLoss()
optimizer = optim.Adam(net.parameters(), lr=0.001)
for epoch in range(3): # 3 full passes over the data
    for data in trainset:  # `data` is a batch of data
        X, y = data  # X is the batch of features, y is the batch of targets.
        net.zero_grad()  # sets gradients to 0 before loss calc. You will do this likely every step.
        X = X.to(device)
        y = y.to(device)
        output = net(X.view(-1,784))  # pass in the reshaped batch (recall they are 28x28 atm)
        loss = F.nll_loss(output, y)  # calc and grab the loss value
        loss.backward()  # apply this loss backwards thru the network's parameters
        optimizer.step()  # attempt to optimize weights to account for loss/gradients
    print(loss)  # print loss. We hope loss (a measure of wrong-ness) declines! 

from djitellopy import Tello

# Список картинок 

imgs = ["q.jfif"]
# Подключение
drone = Tello()
drone.connect()
#Взлёт
drone.takeoff()

for img in imgs:

    gray = cv2.imread(img, cv2.IMREAD_GRAYSCALE)

    with torch.no_grad():

        output = net(torch.Tensor(np.array(cv2.resize(gray, (28, 28)))).to(device).view(-1,784))
        res = (torch.argmax(output))
        print(res.item())

        if res.item() == n:
            pass
        if res.item() == n:
            pass
        if res.item() == n:
            pass
        if res.item() == n:
            pass

# Приземление
drone.land()

# When everything done, release the capture
cv2.destroyAllWindows()

